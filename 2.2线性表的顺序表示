package LinkList2p2;

public class Test {
    public static void main(String[] args) {
        test11();
       /* int[] arr={1,2,24,53,12,23,125,43};
        quick_sort(arr);//victory
        for (int j : arr) {
            System.out.println(j);
        }*/
    }

    //sum:先写出数据结构


    //第一题:从顺序表中删除唯一最小元素,返回其值,空出位置有最后一个填补,若为空,return error,退出运行
    public static void test01() {
        int[] arr={23,12,35,48,2,34,1,544};
        //int[] arr = {};
        System.out.println(deleteMin(arr));
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }

    }

    public static int deleteMin(int[] arr) {
        if (arr.length == 0) {
            System.out.println("错误");
            System.exit(1);
        } else {
            int ret = 0;
            int min = 0;
            for (int i = 1; i < arr.length; i++) {
                if (arr[i] < arr[min]) {
                    min = i;
                }
            }//找最小元素
            ret = arr[min];//保存
            arr[min] = arr[arr.length - 1];
            //替补
            return ret;
        }
        return 0;
    }
    //第一题 victory true
    //答案用的是顺序表,基本上一样

    //第二题:将数组所有元素逆置,空间复杂度为O(1)
    public static void test02() {
        int[] arr = {1, 2, 3, 4, 5,6};
        int[] a = reserve(arr);
        for (int i = 0; i < a.length; i++) {
            System.out.println(a[i]);
        }
    }

    public static int[] reserve(int[] arr) {//逆置的单词是reverse
        int temp = 0;
        for (int i = 0, j = arr.length - 1; i < j; i++, j--) {//i小于j很重要!!!!!!!!
            temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
        }
        return arr;
    }
    //第二题 victory true

    //第三题:删除所有值为x的元素,时间复杂度为O(n),空间复杂度为O(1),长度为n
    public static void test03() {
        int[] arr = {1, 2, 3, 4, 5, 2, 3, 2, 9};
        System.out.println("之前");
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
        System.out.println("之后");
        arr=delete(arr, 2);
        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }
    }

    public static int[] delete(int[] arr, int x) {
        /*for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x && i != arr.length - 1) {
                //用后一个元素代替
                arr[i] = arr[i + 1];
            }
            if (i == arr.length - 1 && arr[i] == x) {
                arr[i] = 0;
            }
        }*/
        //因为答案用的是线性表,长度可以改变,空间复杂度为O(1)
        //算法:记录元素x的个数为k,删除后前面空出k个位置,后面的元素往前挪
        int k=0;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i]==x){
                k++;
            }else{
                arr[i-k]=arr[i];
            }
        }
        //答案就直接length--;
        int[] temp=new int[arr.length-k];
        if (arr.length - k >= 0) System.arraycopy(arr, 0, temp, 0, arr.length - k);
        arr=temp;
        return arr;
    }
    //第三题 victory

    //第四题:从有序顺序表中删除s到t之间所有元素,如果s,t不合理或者数组长度为0.返回错误
    public static void test04() {
        int[] arr = {1, 2,  4, 5,19,32};
        arr=method04(arr, 2, 18);
        for (int i = 0; i < arr.length; i++) {
            System.out.printf(arr[i] + " ");
        }
    }

    public static int[] method04(int[] arr, int s, int t) {
        if (s >= t || arr.length == 0) {
            System.out.println("错误");
            //System.exit(1);
        } else {
            int i = 0;
            while (i < arr.length && arr[i] < s) {
                i++;
            }
            //@
            if(i>=arr.length)
                return arr;//全是比i小的

            //此时i就是s的第一个位置
            int j = i;
            while (j < arr.length && arr[j] <= t) {
                //arr[j] = 0;//将s-t之间元素设置为0
                j++;
            }
            int gap=j-i;
            for (int k = j; k < arr.length; k++) {
                arr[k-gap]=arr[k];
            }//往前挪
            int[] temp=new int[arr.length-gap];
            System.arraycopy(arr, 0, temp, 0, temp.length);
            arr=temp;
        }
        return arr;
        //return arr;
    }
    //第四题 victory true

    //第五题:从顺序表中删除s到t之间所有元素,包含s和t,如果s,t不合理或者数组长度为0.返回错误
    public static void test05() {
        int[] arr = {23, 12, 35, 48, 2, 34, 1, 544};
        System.out.println("之前");
        for (int i = 0; i < arr.length; i++) {
            System.out.printf(arr[i] + " ");
        }
        System.out.println();
        //quick_sort(arr);
        System.out.println("之后");
        /*for (int i = 0; i < arr.length; i++) {
            System.out.printf(arr[i] + " ");
        }*/

        //System.out.println();
        arr=method05(arr, 1, 22);
        for (int i = 0; i < arr.length; i++) {
            System.out.printf(arr[i] + " ");
        }

    }

    public static int[] method05(int[] arr, int s, int t) {

        /*quick_sort(arr);       //改变了元素之间的顺序
        //拷贝第四题
        if (s >= t || arr.length == 0) {
            System.out.println("错误");
            System.exit(1);
        } else {
            int i = 0;
            while (i < arr.length && arr[i] < s) {
                i++;
            }
            //此时i就是s的第一个位置
            int j = i;
            while (j < arr.length && arr[j] <= t) {
                arr[j] = 0;//将s-t之间元素设置为0
                j++;
            }
        }
        //拷贝第四题
*/

        //算法思想:和第三题大致相同
        if (s >= t || arr.length == 0) {
            System.out.println("错误");
            return arr;
            //System.exit(1);
        } else {
            int k=0;
            for (int i = 0; i < arr.length; i++) {
                if(arr[i]>=s&&arr[i]<=t){
                    k++;
                }else{
                    arr[i-k]=arr[i];
                }
            }
            int[] temp=new int[arr.length-k];
            System.arraycopy(arr, 0, temp, 0, temp.length);
            arr=temp;
            return arr;
        }


    }

    public static void quick_sort(int[] arr) {
        quick_sort(0, arr.length - 1, arr);
    }

    public static void quick_sort(int low, int high, int[] arr) {
        if (low < high) {
            int mid = part(low, high, arr);
            quick_sort(low, mid - 1, arr);
            //quick_sort(mid,high,arr); bug还有!!! 服了
            quick_sort(mid + 1, high, arr);
        }
    }

    public static int part(int low, int high, int[] arr) {
        int pivot = arr[low];
        while (low < high) {
            while (low < high && arr[high] > pivot)
                --high;
            arr[low] = arr[high];
            while (low < high && arr[low] < pivot)
                ++low;
            arr[high] = arr[low];
        }
        arr[low] = pivot;
        return low;
    }
    //第五题  victory true

    //第六题:从有序顺序表中删除所有值重复的元素,让表中所有元素不同
    public static void test06() {
        int[] arr = {1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 6, 7, 8, 8};
        int[] a = method06(arr);
        for (int i = 0; i < a.length; i++) {
            System.out.printf(a[i] + " ");
        }
    }

    public static int[] method06(int[] arr) {
        //算法思想:设置两个指针,一个一直往前移动,另外一个每次从0出发到前一个指针位置,时间复杂度为O(n*n)
        //!!!!有序!!!!!!
        if (arr.length <= 1) {
            return arr;
        } else {
            /*int[] ret = new int[arr.length];
            int i = 0;
            int j = 1;
            while (j != arr.length - 1) {
                if (arr[i] != arr[j]) {
                    ++i;
                    ++j;
                    if (arr[i] == 0) {
                        i = j - 1;
                    }
                } else {
                    arr[j] = 0;
                    ++j;
                    //1.将相同的元素设置为0
                    //2.重新开辟一个数组
                }
            }
            if (arr[i] == arr[j]) {
                arr[j] = 0;
            }
            for (int k = 0, p = 0; k < arr.length; k++) {
                if (arr[k] != 0) {
                    ret[p] = arr[k];
                    p++;
                }
            }
            return ret;*/
            //算法:与插入排序类似
            int i=0;
            int j=1;
            for(;j<arr.length;j++){
                if(arr[j]!=arr[i]){//不同就把后面的元素往前挪
                    arr[++i]=arr[j];
                }
            }
            int[] temp=new int[i+1];
            System.arraycopy(arr, 0, temp, 0, temp.length);
            arr=temp;
            return arr;
        }
    }
    //第六题 victory true

    //第七题:将两个有序表合并成一个大的有序表,并返回
    public static void test07() {
        int[] arr1 = {1, 2, 3, 3, 4, 19, 54};
        int[] arr2 = {2, 5, 6, 8, 23, 45};
        int[] show = method07(arr1, arr2);
        for (int i = 0; i < show.length; i++) {
            System.out.printf(show[i] + " ");
        }
    }

    public static int[] method07(int[] arr1, int[] arr2) {//merge
        int left = 0;
        int right = 0;
        int temp = 0;
        int[] ret = new int[arr1.length + arr2.length];
        while (left <= arr1.length - 1 && right <= arr2.length - 1) {//bug是之前arr1.length和arr2.length没有-1;数组越界
            if (arr1[left] <= arr2[right])
                ret[temp++] = arr1[left++];
            else
                ret[temp++] = arr2[right++];
        }
        while (left <= arr1.length - 1) {
            ret[temp++] = arr1[left++];
        }
        while (right <= arr2.length - 1) {
            ret[temp++] = arr2[right++];
        }
        return ret;
    }
    //第七题 victory true

    //第八题:一个顺序表中存放两个数组A[]和B[],将两个数组位置互换为B[]和A[],数组内元素顺序不变
    //逆置问题:可将问题拆分为许多小问题(分成不同的小数组),分别由逆置函数解决
    public static void test08() {
        int[] arr1 = {1, 2, 3, 4,5};
        int[] arr2 = {5, 6, 7, 8, 9};
        int[] arr3 = {1, 2, 3, 4, 5,5, 6, 7, 8, 9};
        System.out.println("原来");
        for (int i = 0; i < arr3.length; i++) {
            System.out.printf(arr3[i] + " ");
        }
        System.out.println();
        method08(arr3, arr1.length);
        System.out.println("后来");
        for (int i = 0; i < arr3.length; i++) {
            System.out.print(arr3[i] + " ");
        }
    }

    public static void method08(int[] arr, int n) {//第一个数组的长度,也是第二个数组开始的下标
        //设置一个临时数组,用于存放两个数组改变后的结果
        //设其中A[]数组长度为n,另一个B[]为m.


        //答案:先整体调用reserve函数,然后分别取一部分调用
        //不过reserve函数要改一下 reserve(int[] arr,int start,int end)

        int[] temp = new int[arr.length];
        int i = 0;
        int j = n;
        int k = 0;
        int p = arr.length - n;
        while (i < n && j < arr.length) {
            temp[k++] = arr[j++];
            temp[p++] = arr[i++];
        }
        while (i < n) {
            temp[p++] = arr[i++];
        }
        while (j < arr.length) {
            temp[k++] = arr[j++];
        }
        System.arraycopy(temp, 0, arr, 0, temp.length);
    }
    //第八题 victory true

    //第九题:从有序数组中最快找到值为x的元素,找到与后继元素交换位置,若没有,则插入使其仍然有序
    public static void test09() {
        int[] arr = {1, 2, 3, 5};
        //System.out.println(binary_Search(arr, 0));//0这有bug
        arr=method09(arr,4);//method方法是对的但是不能把arr改变,没有指针
        for (int i = 0; i < arr.length; i++) {
            System.out.printf(arr[i]+" ");
        }

    }

    //1,用二分查找找到x
    //2,有,交换位置
    //没有,根据返回值来确定插入位置
    public static int[] method09(int[] arr, int x) {
        int i = binary_Search(arr, x);
        if (i >= 0 && i < arr.length - 1) {//可以交换
            int temp = arr[i];
            arr[i] = arr[i + 1];
            arr[i + 1] = temp;
            return arr;
        } else if (i < 0) {//不合法,位置为负数,就是没找到,插入
            int j = -1 * i-1;
            //比较arr[j]的元素与x的大小
            int[] temp = new int[arr.length + 1];
            int k = 0;
            if (arr[j] > x) {
                while (arr[k] != arr[j]) {
                    temp[k] = arr[k];
                    k++;
                }
            } else {
                for (; k <= j; k++) {
                    temp[k] = arr[k];
                }//k=j+1;
                //复制数组
            }
            temp[k++] = x;
            while (k <= temp.length - 1) {
                temp[k] = arr[k - 1];
                k++;
            }
            arr = new int[temp.length];
            System.arraycopy(temp, 0, arr, 0, arr.length);
            return arr;
        } else {
            return arr;
        }

    }

    //以下均是正确的
    public static int binary_Search(int[] arr, int x) {
        return binary_search(arr, x, 0, arr.length - 1);

    }

    public static int binary_search(int[] arr, int x, int low, int high) {//二分查找
        if (low < high) {
            int mid = (low + high) / 2;
            if (arr[mid] > x) {
                return binary_search(arr, x, low, mid - 1); //return 很重要
            } else if (arr[mid] < x) {
                return binary_search(arr, x, mid + 1, high); //return 很重要
            } else {
                return mid;
            }
        } else {
            if (arr[low] != x) {
                System.out.println("没找到");
                return (-1) * (low+1);
            } else {
                return low;
            }

        }
    }
    //答案:分为三个部分:查找,交换,插入三个函数
    //第九题 victory true

    //第十题:将数组中的元素左移动p个位置,算法要尽可能好
    //逆置问题:可将问题拆分为许多小问题(分成不同的小数组),分别由逆置函数解决
    public static void test10() {
        int[] arr = {0, 1, 2, 3, 4, 5};
        method10(arr, 2);
        for (int i = 0; i < arr.length; i++) {
            System.out.printf(arr[i] + " ");
        }


    }
    public static void method10(int[] arr, int p) {
        //算法思想:设置一个临时数组,两个指针;分别移动复制
        /*int[] temp = new int[arr.length];
        int i = 0;
        int j = p;
        int k = 0;
        while (j <= arr.length - 1) {
            temp[k++] = arr[j++];
        }
        while (i <= p - 1) {
            temp[k++] = arr[i++];
        }
        System.arraycopy(temp, 0, arr, 0, temp.length);*/

        //以上时间复杂度为O(n),空间复杂度为O(n)
        //以下是答案方法:
        //多次调用reverse函数,将整个数组视为ab(a代表前p个元素,b代表剩下的),目的是转化为ba
        //先将ab转化为(a-1)(代表a的逆置)b,然后转化为a-1b-1,之后再整体逆置,变为ba
        reverse(0,p-1, arr);
        reverse(p,arr.length-1,arr);
        reverse(0,arr.length-1,arr);
    }
    public static void reverse(int low,int high,int[] arr){
            if (low >= high) {
                return;
            } else {
                int temp = 0;
                while (low <= high) {
                    temp = arr[low];
                    arr[low] = arr[high];
                    arr[high] = temp;
                    ++low;
                    --high;
                }
            }
    }


    //第十题 victory true

    //第十一题:找两个等长升序序列,设计一个尽可能好的算法,找出两个(合并后)序列的中位数


    //答案的算法思想类似是不断将其划分为一个小数组(依据是中位数大概代表数组的平均水平,
    //整个数组(合并后的数组)的中位数大概代表整个数组的平均水平)然后不断舍去偏大和偏小的元素
    //直到数组长度变为1,两个数中最小的就为中位数
    public static void test11() {
        int[] arr1 = {2, 4, 6, 8, 20};
        int[] arr2 = {11, 13, 15, 17, 19};
        System.out.println(method_better11(arr1, arr2));
    }

    public static int method11(int[] arr1, int[] arr2) {
        //两个数列等长,中位数一定是第n个,假设两个长均为n,说明前面有n-1个元素
        //找出第n个元素就行了
        if (arr1.length != arr2.length) {
            System.out.println("输入错误");
            return -1;
        } else {
            int k = 0;
            int i = 0;
            int j = 0;
            boolean flag = true;//判断k是从哪里出来的
            while (k != arr1.length) {
                if (arr1[i] <= arr2[j]) {
                    ++i;
                    flag = true;
                } else {
                    ++j;
                    flag = false;
                }
                ++k;
            }
            if (flag) {
                return arr1[i - 1];
            } else {
                return arr2[j - 1];
            }
        }
    }

    //1.先找到两个数组的中位数a,b
    //2.如果a=b,return a
    //3.如果a>b,那么去掉A中较大那一半的元素,去掉B中较小那一半的元素,两个去除的个数要相同
    //4.如果a<b,那么去掉A中较小那一半的元素,去掉B中较大那一半的元素,两个去除的个数要相同
    //5.重复上述过程

    public static int method_better11(int[] arr1,int[] arr2){
        /*if(arr1.length!=arr2.length){
            return 0;
        }

        int a=findMid(0,arr1.length-1,arr1);
        int b=findMid(0,arr2.length-1,arr2);
        int length=arr1.length;
        while(a!=b){
            if(a>b){
                if(length%2==0){//长度为偶数
                    a=findMid(0,(arr1.length -1)/2, arr1);
                    b=findMid((arr2.length-1)/2+1, arr2.length-1, arr2);
                    length=(arr1.length -1)/2+1;
                }
                else{//长度为奇数
                    a=findMid(0,(arr1.length-1)/2,arr1);
                    b=findMid((arr2.length-1)/2,arr2.length-1,arr2);
                    length=(arr1.length-1)/2+1;
                }
            }
            else{//如果a<b,那么去掉A中较小那一半的元素,去掉B中较大那一半的元素,两个去除的个数要相同
                if(arr1.length%2==0){//长度为偶数
                    b=findMid(0,(arr2.length -1)/2, arr2);
                    a=findMid((arr1.length-1)/2+1, arr1.length-1, arr1);
                    length=(arr2.length -1)/2+1;
                }
                else{//长度为奇数
                    b=findMid(0,(arr2.length-1)/2,arr2);
                    a=findMid((arr1.length-1)/2,arr1.length-1,arr1);
                    length=(arr2.length-1)/2+1;
                }
            }
        }
        return a;*/
        //failure 1.0
        int s1=0,d1=arr1.length-1,s2=0,d2=arr2.length-1;
        int m1,m2;
        //while(s1<d1 && s2<d2 ) 不是这个
        while(s1!=d1 || s2!=d2){//没搞懂!!!!!!!!!!!
            m1=(s1+d1)/2;
            m2=(s2+d2)/2;
            if(arr1[m1]==arr2[m2]){
                return arr1[m1];
            }
            else if(arr1[m1]>arr2[m2]){//如果a>b,那么去掉A中较大那一半的元素,去掉B中较小那一半的元素,两个去除的个数要相同
                if((d1-s1+1)%2==0){//长度为偶数
                    //arr1[m1]=findMid(s1,(d1-1)/2,arr1);
                    d1=m1;
                    s2=m2+1;//保证arr2不比arr1多一个
                }
                else{//长度为奇数
                    d1=m1;
                    s2=m2;
                }
            }
            else{//如果a<b,那么去掉A中较小那一半的元素,去掉B中较大那一半的元素,两个去除的个数要相同
                if((d1-s1+1)%2==0){//长度为偶数
                    s1=m1+1;
                    d2=m2;
                }
                else{//长度为奇数
                    s1=m1;
                    d2=m2;
                }
            }
        }
        //当两个数组各位一个元素时,去较小的那一个
        return Math.min(arr1[s1], arr2[s2]);
    }
    public static int findMid(int low,int high,int[] arr){
        return arr[(low+high)/2];
    }

    //第十一题 victory true

    //第十二题:设计尽可能高效算法,求主元素(个数上要大于数组个数的一半),没有返回-1
    //答案算法不知道怎么想的??????????????????????????????????
    public static void test12(){
        int[] arr1={0,5,5,3,5,7,5,5};
        int[] arr2={0,5,5,3,5,1,5,7};
        System.out.println(method12(arr1));
        System.out.println(method12(arr2));
    }
    /*public static int method12(int[] arr){
        //大于一半!!!
        //等等!!意味着超过一半都是它,那arr.length/2不就是?
        //先排序
        //quick_sort(arr);
        Arrays.sort(arr);
        if(arr.length%2==0){//长度为偶数
            if(arr[(arr.length-1)/2]!=arr[(arr.length-1)/2+1]){
                return -1;//长度不够
            }else {
                return arr[arr.length/2];
            }
        }else{//长度为奇数
            if(arr[(arr.length-1)/2]!=arr[(arr.length-1)/2-1]){
                return -1;
            }else{
                return arr[(arr.length-1)/2];
            }
        }
    }*///failure 1.0

    //答案:遇到一个元素先将他存放到一个a数组(改正:答案是a是一个变量)里,继续扫描原来数组,
    //如果后一个元素和前一个相同,则在a中数组里的该元素的个数(改正:个数也是一个变量)++;
    //如果不同,该元素个数--,while他为0时,换下一个元素继续上述过程
    public static int method12(int[] arr){
        int c=arr[0];
        int count=1;
        //int i=0;
        for (int i = 1; i < arr.length; i++) {
            if(c==arr[i]){
                count++;
            }else{
                count--;
                if(count==0){
                    c=arr[i+1];
                    count=1;
                }
            }
        }//找到C
        count=0;
        for (int i = 0; i < arr.length; i++) {
            if(arr[i]==c){
                count++;
            }
        }//判读c数量是否大于一半
        if(count>arr.length/2){
            return c;
        }else{
            return -1;
        }
        //return 0;
    }
    //第十二题 victory true


    //第十三题:找出数组中未出现的的最小正整数,时间上尽可能快
    public static void test13(){
        int[] arr1={-5,3,2,3};
        int[] arr2={1,2,3};
        System.out.println(method13(arr1));
    }
    /*public static int method13(int[] arr){
        //Arrays.sort(arr);
        int i=1;
        while(contain(arr,i)){
            i++;
        }
        return i;

    }
    public static boolean contain(int[] arr,int x){
        for (int i = 0; i < arr.length; i++) {
            if(arr[i]==x){
                return true;
            }
        }
        return false;
    }*/

    //答案:算法思想:A中n个数字,最小正整数一定在1-n+1之间
    //于是,对于A中的数字进行处理,如果在1到n之间,进行标记
    //!!!!!!!!!!!!!!!!对于不在以上范围的不作处理!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

    public static int method13(int[] arr){
        int[] mark=new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            if(arr[i]>=1 &&arr[i]<=arr.length){
                mark[arr[i]-1]=1;
            }
        }
        int i=0;
        for (; i < mark.length; i++) {
            if(mark[i]!=1){
                return i+1;
            }
        }

        return i+1;
    }
    //第十三题 victory true
}


